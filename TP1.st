Object subclass: #AlgoTek	instanceVariableNames: 'eventos'	classVariableNames: ''	package: 'TP1'!!AlgoTek methodsFor: 'initialization' stamp: 'MatiasVallejos 9/15/2023 20:57'!initialize 	eventos := OrderedCollection new.! !!AlgoTek methodsFor: 'as yet unclassified' stamp: 'MatiasVallejos 9/15/2023 21:05'!agregarEvento: unEvento	eventos add: unEvento.! !!AlgoTek methodsFor: 'not defined category' stamp: 'MatiasVallejos 9/28/2023 06:49'!paraEvento: unEvento registrarUbicacionViP: ubicacionViP  tarifa: unaTarifa lugaresDisponibles: cantidadDisponibles	| resultado |	resultado := self buscarEvento: unEvento.		resultado registrarUbicacionViP: ubicacionViP conTarifa: unaTarifa lugaresDisponibles: cantidadDisponibles.! !!AlgoTek methodsFor: 'not defined category' stamp: 'MatiasVallejos 9/28/2023 04:56'!registrarEvento: unEvento deArtistaNacional: unArtista conTarifaArtista: unaTarifa	| evento |	evento := EventoNacional registrar: unEvento deArtista: unArtista conTarifaArtista: unaTarifa.		self agregarEvento: evento.! !!AlgoTek methodsFor: 'not defined category' stamp: 'MatiasVallejos 9/28/2023 06:48'!buscarEvento: unEvento	| resultado |	resultado := eventos detect: [ :evento | evento esIgual: unEvento ] ifNone: [ EventoInexistenteError new signal].	^ resultado.! !!AlgoTek methodsFor: 'not defined category' stamp: 'MatiasVallejos 9/28/2023 06:49'!costoEntradaPara: unEvento enUbicacion: unaUbicacion pagandoCon: metodoPago	| resultado |	resultado := self buscarEvento: unEvento.	resultado := resultado calcularCostoEntradaEnUbicacion: unaUbicacion.		^ metodoPago calcularPago: resultado.! !!AlgoTek methodsFor: 'not defined category' stamp: 'MatiasVallejos 9/28/2023 04:55'!registrarEvento: unEvento deArtistaInternacional: unArtista conTarifaArtista: unaTarifa	| evento |	evento := EventoInternacional registrar: unEvento deArtista: unArtista conTarifaArtista: unaTarifa.		self agregarEvento: evento.	! !!AlgoTek methodsFor: 'not defined category' stamp: 'MatiasVallejos 9/28/2023 06:49'!paraEvento: unEvento registrarUbicacionPlateaPreferencial: unaUbicacion tarifa: unaTarifa	| resultado |	resultado := self buscarEvento: unEvento.		resultado registrarUbicacionPlateaPreferencial: unaUbicacion conTarifa: unaTarifa.	! !!AlgoTek methodsFor: 'not defined category' stamp: 'MatiasVallejos 9/28/2023 06:49'!paraEvento: unEvento registrarUbicacionCampo: unCampo  tarifa: unaTarifa	| resultado |	resultado := self buscarEvento: unEvento.		resultado registrarUbicacionCampo: unCampo conTarifa: unaTarifa.! !!AlgoTek methodsFor: 'not defined category' stamp: 'MatiasVallejos 9/28/2023 06:49'!entradaMasBarataPara: unEvento pagandoCon: metodoPago	| resultado |	resultado := self buscarEvento: unEvento.		resultado := resultado calcularCostoEntradaMasBarata.		^ metodoPago calcularPago: resultado.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!AlgoTek class	instanceVariableNames: ''!!AlgoTek class methodsFor: 'not defined category' stamp: 'MatiasVallejos 9/28/2023 04:58'!registrarEvento: unEvento deArtistaNacional: unArtista conTarifaArtista: unaTarifa	| algotek |	algotek := self new.	algotek registrarEvento: unEvento deArtistaNacional: unArtista conTarifaArtista: unaTarifa.		^ algotek.	! !!AlgoTek class methodsFor: 'not defined category' stamp: 'MatiasVallejos 9/28/2023 04:57'!registrarEvento: unEvento deArtistaInternacional: unArtista conTarifaArtista: unaTarifa	| algotek |	algotek := self new.		algotek registrarEvento: unEvento deArtistaInternacional: unArtista conTarifaArtista: unaTarifa.		^ algotek.	! !Object subclass: #Efectivo	instanceVariableNames: ''	classVariableNames: ''	package: 'TP1'!!Efectivo methodsFor: 'not defined category' stamp: 'MatiasVallejos 9/28/2023 02:56'!calcularPago: unMonto	(unMonto) < 0 ifTrue: [ MontoInvalidoError new signal ].	^ unMonto.! !Object subclass: #Evento	instanceVariableNames: 'ubicaciones nombre artista tarifa'	classVariableNames: ''	package: 'TP1'!!Evento methodsFor: 'not defined category' stamp: 'MatiasVallejos 9/15/2023 21:18'!esIgual: nombreEvento	^ nombre == nombreEvento.! !!Evento methodsFor: 'not defined category' stamp: 'MatiasVallejos 9/28/2023 06:53'!buscarUbicacion: unaUbicacion	| resultado |	ubicaciones ifEmpty: [ UbicacionesVaciaError new signal].	resultado := ubicaciones detect: [ :ubicacion | ubicacion esIgual: unaUbicacion ] ifNone: [ UbicacionInexistenteError new signal].	^ resultado.! !!Evento methodsFor: 'not defined category' stamp: 'MatiasVallejos 9/22/2023 17:18'!registrar: nombreEvento deArtista: unArtista conTarifaArtista: unaTarifa	(unaTarifa < 0) ifTrue: [ TarifaDebeSerMayorACeroError new signal ].	nombre := nombreEvento.	artista := unArtista.	tarifa := unaTarifa.! !!Evento methodsFor: 'not defined category' stamp: 'MatiasVallejos 9/28/2023 06:18'!calcularCostoEntradaUbicacionMasBarata	| entradaMasBarata |	ubicaciones ifEmpty: [ UbicacionesVaciaError new signal].	entradaMasBarata := ubicaciones min: [ :ubicacion | ubicacion calcularCosto ].	^ entradaMasBarata.! !!Evento methodsFor: 'not defined category' stamp: 'MatiasVallejos 9/28/2023 05:20'!calcularCostoEntradaEnUbicacion: unaUbicacion	self subclassResponsibility.! !!Evento methodsFor: 'not defined category' stamp: 'MatiasVallejos 9/28/2023 06:21'!calcularCostoEntradaMasBarata	self subclassResponsibility.! !!Evento methodsFor: 'initialization' stamp: 'MatiasVallejos 9/15/2023 20:58'!initialize 	ubicaciones := OrderedCollection new.! !!Evento methodsFor: 'as yet unclassified' stamp: 'MatiasVallejos 9/28/2023 06:59'!calcularCostoArtista	self subclassResponsibility.! !!Evento methodsFor: 'as yet unclassified' stamp: 'MatiasVallejos 9/29/2023 07:01'!registrarUbicacionCampo: unaUbicacion conTarifa: unaTarifa	| ubicacion |		ubicacion := UbicacionCampo registrar: unaUbicacion conTarifa: unaTarifa.		self agregarUbicacion: ubicacion.! !!Evento methodsFor: 'as yet unclassified' stamp: 'MatiasVallejos 9/29/2023 07:01'!registrarUbicacionViP: unaUbicacion conTarifa: unaTarifa lugaresDisponibles: cantidadDisponibles	| ubicacion |		ubicacion := UbicacionViP registrar: unaUbicacion conTarifa: unaTarifa lugaresDisponibles: cantidadDisponibles.		self agregarUbicacion: ubicacion.! !!Evento methodsFor: 'as yet unclassified' stamp: 'MatiasVallejos 9/29/2023 07:01'!agregarUbicacion: unaUbicacion	ubicaciones add: unaUbicacion.! !!Evento methodsFor: 'as yet unclassified' stamp: 'MatiasVallejos 9/29/2023 07:01'!registrarUbicacionPlateaPreferencial: unaUbicacion conTarifa: unaTarifa	| ubicacion |		ubicacion := UbicacionPlatea registrar: unaUbicacion conTarifa: unaTarifa.		self agregarUbicacion: ubicacion.! !Error subclass: #EventoInexistenteError	instanceVariableNames: ''	classVariableNames: ''	package: 'TP1'!Evento subclass: #EventoInternacional	instanceVariableNames: ''	classVariableNames: ''	package: 'TP1'!!EventoInternacional methodsFor: 'not defined category' stamp: 'MatiasVallejos 9/28/2023 06:58'!calcularCostoArtista	^ (tarifa * 2) / 5 + 1000.! !!EventoInternacional methodsFor: 'not defined category' stamp: 'MatiasVallejos 9/28/2023 06:59'!calcularCostoEntradaMasBarata	| calculoTotal | 	calculoTotal := self calcularCostoArtista. 	^ calculoTotal + self calcularCostoEntradaUbicacionMasBarata.! !!EventoInternacional methodsFor: 'not defined category' stamp: 'MatiasVallejos 9/28/2023 06:58'!calcularCostoEntradaEnUbicacion: unaUbicacion	| resultado calculoTotal |	resultado := self buscarUbicacion: unaUbicacion.		calculoTotal := self calcularCostoArtista.		calculoTotal  := calculoTotal + resultado calcularCosto.		^ calculoTotal.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!EventoInternacional class	instanceVariableNames: ''!!EventoInternacional class methodsFor: 'not defined category' stamp: 'MatiasVallejos 9/22/2023 17:05'!registrar: nombreEvento deArtista: unArtista conTarifaArtista: unaTarifa	| evento |		evento := self new.	evento registrar: nombreEvento deArtista: unArtista conTarifaArtista: unaTarifa.		^ evento.! !Evento subclass: #EventoNacional	instanceVariableNames: ''	classVariableNames: ''	package: 'TP1'!!EventoNacional methodsFor: 'not defined category' stamp: 'MatiasVallejos 9/28/2023 06:58'!calcularCostoArtista	^ tarifa log.! !!EventoNacional methodsFor: 'not defined category' stamp: 'MatiasVallejos 9/28/2023 06:59'!calcularCostoEntradaMasBarata	| calculoTotal | 	calculoTotal := self calcularCostoArtista. 	^ calculoTotal + self calcularCostoEntradaUbicacionMasBarata.! !!EventoNacional methodsFor: 'not defined category' stamp: 'MatiasVallejos 9/28/2023 06:59'!calcularCostoEntradaEnUbicacion: unaUbicacion	| resultado calculoTotal |	resultado := self buscarUbicacion: unaUbicacion.		calculoTotal := self calcularCostoArtista.		calculoTotal  := calculoTotal + resultado calcularCosto.		^ calculoTotal.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!EventoNacional class	instanceVariableNames: ''!!EventoNacional class methodsFor: 'not defined category' stamp: 'MatiasVallejos 9/22/2023 17:05'!registrar: nombreEvento deArtista: unArtista conTarifaArtista: unaTarifa	| evento |		evento := self new.	evento registrar: nombreEvento deArtista: unArtista conTarifaArtista: unaTarifa.		^ evento.! !Error subclass: #MontoInvalidoError	instanceVariableNames: ''	classVariableNames: ''	package: 'TP1'!Error subclass: #NoHayLugaresDisponiblesError	instanceVariableNames: ''	classVariableNames: ''	package: 'TP1'!Error subclass: #TarifaDebeSerMayorACeroError	instanceVariableNames: ''	classVariableNames: ''	package: 'TP1'!Object subclass: #Tarjeta	instanceVariableNames: 'nombreBanco porcentajeDescuento'	classVariableNames: ''	package: 'TP1'!!Tarjeta methodsFor: 'not defined category' stamp: 'MatiasVallejos 9/28/2023 07:52'!calcularPago: unMonto	(unMonto) < 0 ifTrue: [ MontoInvalidoError new signal ].	^ unMonto * porcentajeDescuento.! !!Tarjeta methodsFor: 'not defined category' stamp: 'MatiasVallejos 9/28/2023 03:02'!registrarConBanco: unBanco	nombreBanco := unBanco.	porcentajeDescuento := 1.	(nombreBanco = 'Patagonia') ifTrue: [ porcentajeDescuento := 0.8 ]! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Tarjeta class	instanceVariableNames: ''!!Tarjeta class methodsFor: 'not defined category' stamp: 'MatiasVallejos 9/15/2023 23:38'!conNombre: unBanco	| tarjeta |		tarjeta := self new.		tarjeta registrarConBanco: unBanco.		^ tarjeta.! !Object subclass: #Ubicacion	instanceVariableNames: 'nombre tarifa'	classVariableNames: ''	package: 'TP1'!!Ubicacion methodsFor: 'as yet unclassified' stamp: 'MatiasVallejos 9/15/2023 21:55'!calcularCosto	self subclassResponsibility.! !!Ubicacion methodsFor: 'not defined category' stamp: 'MatiasVallejos 9/22/2023 17:19'!registrar: unNombre conTarifa: unaTarifa	(unaTarifa < 0) ifTrue: [ TarifaDebeSerMayorACeroError new signal ].	nombre := unNombre.	tarifa := unaTarifa.! !!Ubicacion methodsFor: 'not defined category' stamp: 'MatiasVallejos 9/15/2023 21:40'!esIgual: unaUbicacion	^ nombre == unaUbicacion.! !Ubicacion subclass: #UbicacionCampo	instanceVariableNames: ''	classVariableNames: ''	package: 'TP1'!!UbicacionCampo methodsFor: 'not defined category' stamp: 'MatiasVallejos 9/15/2023 22:25'!calcularCosto	^ tarifa.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!UbicacionCampo class	instanceVariableNames: ''!!UbicacionCampo class methodsFor: 'not defined category' stamp: 'MatiasVallejos 9/22/2023 17:40'!registrar: unNombre conTarifa: unaTarifa	| ubicacion |		ubicacion := self new.		ubicacion registrar: unNombre conTarifa: unaTarifa.		^ ubicacion.! !Error subclass: #UbicacionInexistenteError	instanceVariableNames: ''	classVariableNames: ''	package: 'TP1'!Error subclass: #UbicacionNombreError	instanceVariableNames: ''	classVariableNames: ''	package: 'TP1'!Ubicacion subclass: #UbicacionPlatea	instanceVariableNames: ''	classVariableNames: ''	package: 'TP1'!!UbicacionPlatea methodsFor: 'not defined category' stamp: 'MatiasVallejos 9/29/2023 05:55'!calcularCosto	| numerosUbicacion | 	(nombre size) < 2 ifTrue: [ UbicacionNombreError new signal ].	numerosUbicacion := (nombre last: 2) asInteger.	numerosUbicacion ifNil: [ UbicacionNombreError new signal ].		^ (numerosUbicacion  * tarifa).! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!UbicacionPlatea class	instanceVariableNames: ''!!UbicacionPlatea class methodsFor: 'not defined category' stamp: 'MatiasVallejos 9/22/2023 17:40'!registrar: unNombre conTarifa: unaTarifa	| ubicacion |		ubicacion := self new.		ubicacion registrar: unNombre conTarifa: unaTarifa.		^ ubicacion.! !Ubicacion subclass: #UbicacionViP	instanceVariableNames: 'lugaresDisponibles'	classVariableNames: ''	package: 'TP1'!!UbicacionViP methodsFor: 'not defined category' stamp: 'MatiasVallejos 9/28/2023 05:02'!registrar: unaUbicacion conTarifa: unaTarifa lugaresDisponibles: cantidadDisponibles	(unaTarifa < 0) ifTrue: [ TarifaDebeSerMayorACeroError new signal ].	(cantidadDisponibles < 0) ifTrue: [ NoHayLugaresDisponiblesError new signal ].	nombre := unaUbicacion.	tarifa := unaTarifa.	lugaresDisponibles := cantidadDisponibles.! !!UbicacionViP methodsFor: 'not defined category' stamp: 'MatiasVallejos 9/28/2023 05:01'!calcularCosto	| resultado |	lugaresDisponibles = 0 ifTrue: [ NoHayLugaresDisponiblesError new signal ].	resultado := (tarifa / lugaresDisponibles).	lugaresDisponibles := lugaresDisponibles -1.	^ resultado.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!UbicacionViP class	instanceVariableNames: ''!!UbicacionViP class methodsFor: 'not defined category' stamp: 'MatiasVallejos 9/22/2023 17:40'!registrar: unaUbicacion conTarifa: unaTarifa lugaresDisponibles: cantidadDisponibles	| ubicacion |		ubicacion := self new.		ubicacion registrar: unaUbicacion conTarifa: unaTarifa lugaresDisponibles: cantidadDisponibles. 		^ ubicacion.! !Error subclass: #UbicacionesVaciaError	instanceVariableNames: ''	classVariableNames: ''	package: 'TP1'!