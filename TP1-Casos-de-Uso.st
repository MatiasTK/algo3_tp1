TestCase subclass: #AlgotekTest	instanceVariableNames: ''	classVariableNames: ''	package: 'TP1-Casos-de-Uso'!!AlgotekTest methodsFor: 'tests' stamp: 'MatiasVallejos 9/28/2023 04:43'!test09PuedoCalcularElCostoEntradaEnUnaUbicacion	| algotek efectivo total costoAPagar|		algotek := AlgoTek registrarEvento: 'Bandito Tour' deArtistaInternacional: 'Twenty one pilots'  conTarifaArtista: 1500.	efectivo := Efectivo new.		algotek paraEvento: 'Bandito Tour' registrarUbicacionPlateaPreferencial: 'M950' tarifa: 1000.	algotek paraEvento: 'Bandito Tour' registrarUbicacionCampo: '01' tarifa: 1000.		"Precio evento artista internacional"	total := (1500 * 2) / 5 + 1000.		"Precio ubicacion platea"	total := total + (50*1000).		costoAPagar := algotek costoEntradaPara: 'Bandito Tour' enUbicacion: 'M950' pagandoCon: efectivo.		self assert: costoAPagar equals: total. ! !!AlgotekTest methodsFor: 'tests' stamp: 'MatiasVallejos 9/22/2023 18:16'!test02NoSePuedeRegistrarConTarifaArtistaInternacionalNegativa		self should: [ AlgoTek registrarEvento: 'Bandito Tour' deArtistaInternacional: 'Twenty One Pilots' conTarifaArtista: -1 ] raise: TarifaDebeSerMayorACeroError.! !!AlgotekTest methodsFor: 'tests' stamp: 'MatiasVallejos 9/22/2023 18:34'!test06NoPuedoRegistrarUbicacionPlateaPrefrencialEnEventoInexistente	| algotek efectivo |		algotek := AlgoTek registrarEvento:  'Bandito Tour' deArtistaInternacional: 'Twenty one pilots'  conTarifaArtista: 1000.	efectivo := Efectivo new.		algotek paraEvento: 'Bandito Tour' registrarUbicacionPlateaPreferencial: '01'  tarifa: 100. 		self should: [ algotek paraEvento: 'Ya supiste tour' registrarUbicacionPlateaPreferencial: '02'  tarifa: 200  ] raise: EventoInexistenteError.! !!AlgotekTest methodsFor: 'tests' stamp: 'MatiasVallejos 9/22/2023 18:33'!test04NoPuedoCalcularEntradaBarataEnEventoInexistente	| algotek efectivo |		algotek := AlgoTek registrarEvento:  'Bandito Tour' deArtistaInternacional: 'Twenty one pilots'  conTarifaArtista: 1000.	efectivo := Efectivo new.		algotek paraEvento: 'Bandito Tour' registrarUbicacionPlateaPreferencial: '01'  tarifa: 100. 		self should: [ algotek entradaMasBarataPara: 'Ya supiste Tour' pagandoCon: Efectivo ] raise: EventoInexistenteError.! !!AlgotekTest methodsFor: 'tests' stamp: 'MatiasVallejos 9/22/2023 18:33'!test05NoPuedoRegistrarUbicacionCampoEnEventoInexistente	| algotek efectivo |		algotek := AlgoTek registrarEvento:  'Bandito Tour' deArtistaInternacional: 'Twenty one pilots'  conTarifaArtista: 1000.	efectivo := Efectivo new.		algotek paraEvento: 'Bandito Tour' registrarUbicacionPlateaPreferencial: '01'  tarifa: 100. 		self should: [ algotek paraEvento: 'Ya supiste tour' registrarUbicacionCampo: '02'  tarifa: 200  ] raise: EventoInexistenteError.! !!AlgotekTest methodsFor: 'tests' stamp: 'MatiasVallejos 9/28/2023 06:16'!test12PuedoCalcularLaEntradaMasBarataPagandoConTarjeta	| algotek tarjeta total costoAPagar |		tarjeta := Tarjeta conNombre: 'Patagonia'.		algotek:= AlgoTek registrarEvento: 'Ya supiste tour' deArtistaNacional: 'Duki' conTarifaArtista: 1000.		algotek paraEvento: 'Ya supiste tour' registrarUbicacionCampo: '01'  tarifa: 100.	algotek paraEvento: 'Ya supiste tour' registrarUbicacionViP: '02' tarifa: 5000 lugaresDisponibles: 2.		"Precio evento artista nacional"	total := 1000 log.	"Precio ubicacion campo"	total := total + 100.	"Descuento banco patagonia"	total := total * 0.8.		costoAPagar := algotek entradaMasBarataPara: 'Ya supiste tour' pagandoCon: tarjeta.		self assert: costoAPagar closeTo: total precision: 0.0001.! !!AlgotekTest methodsFor: 'tests' stamp: 'MatiasVallejos 9/22/2023 18:33'!test03NoPuedoCalcularCostoEntradaEnEventoInexistente	| algotek efectivo |		algotek := AlgoTek registrarEvento:  'Bandito Tour' deArtistaInternacional: 'Twenty one pilots'  conTarifaArtista: 1000.	efectivo := Efectivo new.		algotek paraEvento: 'Bandito Tour' registrarUbicacionPlateaPreferencial: '01'  tarifa: 100. 		self should: [ algotek costoEntradaPara: 'Ya supiste tour' enUbicacion: '01' pagandoCon: Efectivo ] raise: EventoInexistenteError.! !!AlgotekTest methodsFor: 'tests' stamp: 'MatiasVallejos 9/28/2023 04:59'!test10PuedoCalcularElCostoEntradaDeUnEventoTeniendoDos	| algotek efectivo total costoAPagar |		algotek := AlgoTek registrarEvento: 'Bandito Tour' deArtistaInternacional: 'Twenty one pilots'  conTarifaArtista: 1500.	efectivo := Efectivo new.		algotek paraEvento: 'Bandito Tour' registrarUbicacionPlateaPreferencial: 'M950' tarifa: 1000.	algotek paraEvento: 'Bandito Tour' registrarUbicacionCampo: '01' tarifa: 1000.		algotek registrarEvento: 'Ya supiste tour' deArtistaNacional: 'Duki' conTarifaArtista: 1000.		algotek paraEvento: 'Ya supiste tour' registrarUbicacionCampo: '01'  tarifa: 100.	algotek paraEvento: 'Ya supiste tour' registrarUbicacionViP: '02' tarifa: 500 lugaresDisponibles: 2.		"Precio evento artista nacional"	total := 1000 log.	"Precio ubicacion vip"	total := total + (500 / 2).		costoAPagar := algotek costoEntradaPara: 'Ya supiste tour' enUbicacion: '02' pagandoCon: efectivo.		self assert: costoAPagar closeTo: total precision: 0.0001.! !!AlgotekTest methodsFor: 'tests' stamp: 'MatiasVallejos 9/28/2023 04:42'!test08PuedoCalcularElCostoEntradaMasBarataCorrectamente	| algotek efectivo total costoAPagar|		algotek := AlgoTek registrarEvento: 'Bandito Tour' deArtistaInternacional: 'Twenty one pilots'  conTarifaArtista: 1000.	efectivo := Efectivo new.		algotek paraEvento: 'Bandito Tour' registrarUbicacionPlateaPreferencial: 'M950' tarifa: 1000.	algotek paraEvento: 'Bandito Tour' registrarUbicacionCampo: '01' tarifa: 100.		"Precio evento artista internacional"	total := (1000 * 2) / 5 + 1000.		"Precio ubicacion mas barata"	total := total + 100.		costoAPagar := algotek entradaMasBarataPara: 'Bandito Tour' pagandoCon: efectivo.		self assert: costoAPagar equals: total. 	! !!AlgotekTest methodsFor: 'tests' stamp: 'MatiasVallejos 9/28/2023 06:27'!test11PuedoCalcularElCostoEntradaDeDosEventosAlMismoTiempo	| algotek efectivo tarjeta totalPrimerEvento costoAPagarPrimerEvento totalSegundoEvento costoAPagarSegundoEvento |	efectivo := Efectivo new.	tarjeta := Tarjeta conNombre: 'Patagonia'.		algotek := AlgoTek registrarEvento:  'Ya supiste tour' deArtistaNacional: 'Duki'  conTarifaArtista: 1000.	algotek registrarEvento: 'Bandito tour' deArtistaInternacional: 'Twenty one pilots' conTarifaArtista: 2000.		algotek paraEvento: 'Ya supiste tour' registrarUbicacionCampo: '01' tarifa: 500.	algotek paraEvento: 'Ya supiste tour' registrarUbicacionPlateaPreferencial: '1102' tarifa: 200. 	algotek paraEvento: 'Ya supiste tour' registrarUbicacionViP: '02' tarifa: 800 lugaresDisponibles: 5.		algotek paraEvento: 'Bandito tour' registrarUbicacionCampo: '01' tarifa: 400.	algotek paraEvento: 'Bandito tour' registrarUbicacionPlateaPreferencial: 'M950' tarifa: 600.	algotek paraEvento: 'Bandito tour' registrarUbicacionViP: '02' tarifa: 1000 lugaresDisponibles: 2.		totalPrimerEvento := 1000 log.	totalPrimerEvento := totalPrimerEvento  + (200 * 2).	costoAPagarPrimerEvento := algotek entradaMasBarataPara: 'Ya supiste tour' pagandoCon: efectivo.		totalSegundoEvento := (2000 *2) / 5 + 1000.	totalSegundoEvento := totalSegundoEvento + (1000 / 2).	totalSegundoEvento := totalSegundoEvento * 0.8.	costoAPagarSegundoEvento := algotek costoEntradaPara: 'Bandito tour' enUbicacion: '02' pagandoCon: tarjeta.		self assert: costoAPagarPrimerEvento closeTo: costoAPagarPrimerEvento.	self assert: costoAPagarSegundoEvento equals: costoAPagarSegundoEvento.	! !!AlgotekTest methodsFor: 'tests' stamp: 'MatiasVallejos 9/22/2023 18:20'!test01NoSePuedeRegistrarConTarifaArtistaNacionalNegativa		self should: [ AlgoTek registrarEvento: 'Ya supiste tour' deArtistaInternacional: 'Duki' conTarifaArtista: -1 ] raise: TarifaDebeSerMayorACeroError.! !!AlgotekTest methodsFor: 'tests' stamp: 'MatiasVallejos 9/22/2023 18:36'!test07NoPuedoRegistrarUbicacionViPEnEventoInexistente	| algotek efectivo |		algotek := AlgoTek registrarEvento:  'Bandito Tour' deArtistaInternacional: 'Twenty one pilots'  conTarifaArtista: 1000.	efectivo := Efectivo new.		algotek paraEvento: 'Bandito Tour' registrarUbicacionPlateaPreferencial: '01'  tarifa: 100. 		self should: [ algotek paraEvento: 'Ya supiste tour' registrarUbicacionViP: '02'  tarifa: 200  lugaresDisponibles: 5 ] raise: EventoInexistenteError.! !TestCase subclass: #EfectivoTest	instanceVariableNames: ''	classVariableNames: ''	package: 'TP1-Casos-de-Uso'!!EfectivoTest methodsFor: 'tests' stamp: 'MatiasVallejos 9/28/2023 02:56'!test02NoPuedoCalcularConMontoNegativo	| metodo |		metodo := Efectivo new.		self should: [ metodo calcularPago: -1500 ] raise: MontoInvalidoError.! !!EfectivoTest methodsFor: 'tests' stamp: 'MatiasVallejos 9/28/2023 02:55'!test01PuedoCalcularElMontoCorrectamente	| metodo resultado |		metodo := Efectivo new.	resultado := metodo calcularPago: 1500.		self assert: resultado equals: 1500.! !TestCase subclass: #EventoInternacionalTest	instanceVariableNames: ''	classVariableNames: ''	package: 'TP1-Casos-de-Uso'!!EventoInternacionalTest methodsFor: 'tests' stamp: 'MatiasVallejos 9/28/2023 02:29'!test02NoSePuedeCalcularCostoEntradaEnUbicacionInexistente	| evento |	evento := EventoInternacional registrar: 'Bandito Tour' deArtista: 'Twenty One Pilots' conTarifaArtista: 1000.		evento registrarUbicacionCampo:  '01' conTarifa: 100.	evento registrarUbicacionPlateaPreferencial:  'M912' conTarifa: 500.	evento registrarUbicacionViP: '03' conTarifa: 800 lugaresDisponibles: 5.		self should: [ evento calcularCostoEntradaEnUbicacion: '04' ] raise: UbicacionInexistenteError.! !!EventoInternacionalTest methodsFor: 'tests' stamp: 'MatiasVallejos 9/28/2023 06:23'!test04PuedoCalcularElCostoEntradaMasBarataCorrectamentePagandoConEfectivo	| evento calculoFinal |	evento := EventoInternacional registrar: 'Bandito Tour' deArtista: 'Twenty One Pilots' conTarifaArtista: 1000.		evento registrarUbicacionCampo:  '01' conTarifa: 50.	evento registrarUbicacionPlateaPreferencial:  'M912' conTarifa: 500.	evento registrarUbicacionViP: '03' conTarifa: 800 lugaresDisponibles: 5.		"Base artista"	calculoFinal := (1000 * 2) / 5 + 1000.		"Costo ubicacion"		calculoFinal := calculoFinal + 50.		self assert: (evento calcularCostoEntradaMasBarata) equals: calculoFinal. ! !!EventoInternacionalTest methodsFor: 'tests' stamp: 'MatiasVallejos 9/28/2023 02:14'!test01NoPuedoCalcularElCostoEntradaEnUbicacionSinUbicaciones	| evento |	evento := EventoInternacional registrar: 'Bandito Tour' deArtista: 'Twenty One Pilots' conTarifaArtista: 1000.		self should: [ evento calcularCostoEntradaEnUbicacion: '01' ] raise: UbicacionesVaciaError.! !!EventoInternacionalTest methodsFor: 'tests' stamp: 'MatiasVallejos 9/28/2023 02:21'!test03PuedoCalcularElCostoEntradaEnUnaUbicacionCorrecta	| evento ubicacionElegida calculoFinal |	evento := EventoInternacional registrar: 'Bandito Tour' deArtista: 'Twenty One Pilots' conTarifaArtista: 1000.	ubicacionElegida := '01'.		evento registrarUbicacionCampo:  ubicacionElegida conTarifa: 100.	evento registrarUbicacionPlateaPreferencial:  '02' conTarifa: 500.	evento registrarUbicacionViP: '03' conTarifa: 800 lugaresDisponibles: 5.		"Base artista"	calculoFinal := (1000 * 2) / 5 + 1000.		"Costo ubicacion"		calculoFinal := calculoFinal + 100.		self assert: (evento calcularCostoEntradaEnUbicacion: ubicacionElegida ) equals: calculoFinal. 	! !TestCase subclass: #EventoNacionalTest	instanceVariableNames: ''	classVariableNames: ''	package: 'TP1-Casos-de-Uso'!!EventoNacionalTest methodsFor: 'tests' stamp: 'MatiasVallejos 9/28/2023 02:30'!test01NoPuedoCalcularElCostoEntradaEnUbicacionSinUbicaciones	| evento |	evento := EventoNacional registrar: 'Ya Supiste Tour' deArtista: 'Duki' conTarifaArtista: 1500.		self should: [ evento calcularCostoEntradaEnUbicacion: '01' ] raise: UbicacionesVaciaError.! !!EventoNacionalTest methodsFor: 'tests' stamp: 'MatiasVallejos 9/28/2023 02:30'!test02NoSePuedeCalcularCostoEntradaEnUbicacionInexistente	| evento |	evento := EventoNacional registrar: 'Ya Supiste Tour' deArtista: 'Duki' conTarifaArtista: 1500.		evento registrarUbicacionCampo:  '01' conTarifa: 100.	evento registrarUbicacionPlateaPreferencial:  'M912' conTarifa: 500.	evento registrarUbicacionViP: '03' conTarifa: 800 lugaresDisponibles: 5.		self should: [ evento calcularCostoEntradaEnUbicacion: '04' ] raise: UbicacionInexistenteError.! !!EventoNacionalTest methodsFor: 'tests' stamp: 'MatiasVallejos 9/28/2023 02:33'!test03PuedoCalcularElCostoEntradaEnUnaUbicacionCorrecta	| evento ubicacionElegida calculoFinal |	evento := EventoNacional registrar: 'Ya supiste tour' deArtista: 'Duki' conTarifaArtista: 1500.	ubicacionElegida := '01'.		evento registrarUbicacionCampo:  ubicacionElegida conTarifa: 150.	evento registrarUbicacionPlateaPreferencial:  'M912' conTarifa: 500.	evento registrarUbicacionViP: '03' conTarifa: 800 lugaresDisponibles: 5.		"Base artista"	calculoFinal := 1500 log.		"Costo ubicacion"		calculoFinal := calculoFinal + 150.		self assert: (evento calcularCostoEntradaEnUbicacion: ubicacionElegida ) equals: calculoFinal. ! !!EventoNacionalTest methodsFor: 'tests' stamp: 'MatiasVallejos 9/28/2023 06:23'!test04PuedoCalcularElCostoEntradaMasBarataCorrectamentePagandoConEfectivo	| evento calculoFinal |	evento := EventoNacional registrar: 'Ya supiste tour' deArtista: 'Duki' conTarifaArtista: 1500.		evento registrarUbicacionCampo:  '01' conTarifa: 50.	evento registrarUbicacionPlateaPreferencial:  'M912' conTarifa: 500.	evento registrarUbicacionViP: '03' conTarifa: 800 lugaresDisponibles: 5.		"Base artista"	calculoFinal := 1500 log.		"Costo ubicacion"		calculoFinal := calculoFinal + 50.		self assert: (evento calcularCostoEntradaMasBarata) equals: calculoFinal. ! !TestCase subclass: #EventoTest	instanceVariableNames: ''	classVariableNames: ''	package: 'TP1-Casos-de-Uso'!!EventoTest methodsFor: 'tests' stamp: 'MatiasVallejos 9/28/2023 06:18'!test03PuedoRegistrarVariasUbicacionesEnEventoYObtenerLaEntradaMasBarata	| evento |		evento  := Evento new.	evento registrar: 'Ya supiste tour' deArtista: 'Duki' conTarifaArtista: 1000.	evento registrarUbicacionCampo: '01' conTarifa: 100.	evento registrarUbicacionPlateaPreferencial: '02' conTarifa: 500.	evento registrarUbicacionViP: '03' conTarifa: 800 lugaresDisponibles: 5.		self assert: evento calcularCostoEntradaUbicacionMasBarata equals: 100.	! !!EventoTest methodsFor: 'tests' stamp: 'MatiasVallejos 9/28/2023 02:03'!test01DosEventosIdenticosSonIguales	| evento |		evento := Evento new.	evento registrar: 'Ya supiste tour' deArtista: 'Duki' conTarifaArtista: 1000.		self assert: (evento esIgual: 'Ya supiste tour').! !!EventoTest methodsFor: 'tests' stamp: 'MatiasVallejos 9/28/2023 02:04'!test02SiIntentoRegistrarUnArtistaConTarifaNegativaLanzaTarifaDebeSerMayorACeroError	|evento|	evento := Evento new.	self should: [ evento registrar: 'Ya supiste tour' deArtista: 'Duki' conTarifaArtista: -1000. ] 	raise: TarifaDebeSerMayorACeroError.		! !!EventoTest methodsFor: 'tests' stamp: 'MatiasVallejos 9/28/2023 06:18'!test04NoPuedoCalcularEntradaMasBarataSiNoHayUbicaciones	| evento |		evento  := Evento new.	evento registrar: 'Ya supiste tour' deArtista: 'Duki' conTarifaArtista: 1000.	self should: [ evento calcularCostoEntradaUbicacionMasBarata ] raise: UbicacionesVaciaError.! !TestCase subclass: #TarjetaTest	instanceVariableNames: ''	classVariableNames: ''	package: 'TP1-Casos-de-Uso'!!TarjetaTest methodsFor: 'tests' stamp: 'MatiasVallejos 9/28/2023 08:13'!test03NoPuedoCalcularConMontoNegativo	| metodo |		metodo := Tarjeta conNombre: 'Generico'.		self should: [ metodo calcularPago: -1500 ] raise: MontoInvalidoError.! !!TarjetaTest methodsFor: 'tests' stamp: 'MatiasVallejos 9/28/2023 02:59'!test02PuedoCalcularElMontoCorrectamenteConTarjetaPatagonia	| metodo resultado |		metodo := Tarjeta conNombre: 'Patagonia'.	resultado := metodo calcularPago: 1500.		self assert: resultado equals: (1500 * 0.8).! !!TarjetaTest methodsFor: 'tests' stamp: 'MatiasVallejos 9/28/2023 02:58'!test01PuedoCalcularElMontoCorrectamenteConTarjetaGenerica	| metodo resultado |		metodo := Tarjeta conNombre: 'Generico'.	resultado := metodo calcularPago: 1500.		self assert: resultado equals: 1500.! !TestCase subclass: #UbicacionCampoTest	instanceVariableNames: ''	classVariableNames: ''	package: 'TP1-Casos-de-Uso'!!UbicacionCampoTest methodsFor: 'tests' stamp: 'MatiasVallejos 9/28/2023 02:39'!test01PuedoCalcularElCostoDeLaUbicacionCorrectamente	| ubicacion |		ubicacion := UbicacionCampo registrar: 'Campo 01' conTarifa: 1500.		self assert: (ubicacion calcularCosto) equals: 1500.! !!UbicacionCampoTest methodsFor: 'tests' stamp: 'MatiasVallejos 9/28/2023 02:46'!test02NoPuedoRegistrarUnaUbicacionConTarifaNegativa	self should:[ UbicacionCampo registrar:  'Campo 01' conTarifa: -1000] raise: TarifaDebeSerMayorACeroError.! !TestCase subclass: #UbicacionPlateaTest	instanceVariableNames: ''	classVariableNames: ''	package: 'TP1-Casos-de-Uso'!!UbicacionPlateaTest methodsFor: 'tests' stamp: 'MatiasVallejos 9/29/2023 05:52'!test03NoPuedoRegistrarYCalcularUnaUbicacionConNombreCorto	| ubicacion |		ubicacion := UbicacionPlatea registrar: 'M' conTarifa: 500.		self should: [ ubicacion calcularCosto ] raise: UbicacionNombreError.! !!UbicacionPlateaTest methodsFor: 'tests' stamp: 'MatiasVallejos 9/29/2023 05:53'!test04NoPuedoRegistrarYCalcularUnaUbicacionConNombreSinDigitos	| ubicacion |		ubicacion := UbicacionPlatea registrar: 'MPOW' conTarifa: 500.		self should: [ ubicacion calcularCosto ] raise: UbicacionNombreError.! !!UbicacionPlateaTest methodsFor: 'tests' stamp: 'MatiasVallejos 9/28/2023 02:41'!test01PuedoCalcularElCostoDeLaUbicacionCorrectamente	| ubicacion |		ubicacion := UbicacionPlatea registrar: 'M950' conTarifa: 1500.		self assert: (ubicacion calcularCosto) equals: (1500 * 50).! !!UbicacionPlateaTest methodsFor: 'tests' stamp: 'MatiasVallejos 9/29/2023 05:51'!test02NoPuedoRegistrarUnaUbicacionConTarifaNegativa	self should:[ UbicacionPlatea registrar: 'M950' conTarifa: -1000] raise: TarifaDebeSerMayorACeroError.! !TestCase subclass: #UbicacionTest	instanceVariableNames: ''	classVariableNames: ''	package: 'TP1-Casos-de-Uso'!!UbicacionTest methodsFor: 'tests' stamp: 'MatiasVallejos 9/28/2023 02:36'!test01DosUbicacionesSonIguales	| ubicacion |	ubicacion := Ubicacion new.		ubicacion registrar: 'Platea 01' conTarifa: 500.		self assert: (ubicacion esIgual: 'Platea 01').		 ! !!UbicacionTest methodsFor: 'tests' stamp: 'MatiasVallejos 9/28/2023 02:37'!test02NoPuedoRegistrarUnaUbicacionConTarifaNegativa	| ubicacion |		ubicacion := Ubicacion new.		self should: [ ubicacion registrar: 'Platea 01' conTarifa: -100 ] raise: TarifaDebeSerMayorACeroError.! !TestCase subclass: #UbicacionViPTest	instanceVariableNames: ''	classVariableNames: ''	package: 'TP1-Casos-de-Uso'!!UbicacionViPTest methodsFor: 'tests' stamp: 'MatiasVallejos 9/28/2023 02:48'!test03NoPuedoRegistrarUnaUbicacionVipConLugaresNegativos	self should: [ UbicacionViP registrar:  'ViP 01' conTarifa: 1000 lugaresDisponibles: -1] raise: NoHayLugaresDisponiblesError.! !!UbicacionViPTest methodsFor: 'tests' stamp: 'MatiasVallejos 9/28/2023 02:51'!test04NoPuedoCalcularCostoSiNoQuedanMasLugares	| ubicacion |		ubicacion := UbicacionViP registrar:  'ViP 01' conTarifa: 1000 lugaresDisponibles: 1.		self assert: (ubicacion calcularCosto) equals: 1000.		self should: [ ubicacion calcularCosto ] raise: NoHayLugaresDisponiblesError.	! !!UbicacionViPTest methodsFor: 'tests' stamp: 'MatiasVallejos 9/28/2023 02:44'!test01PuedoCalcularElCostoDeLaUbicacionCorrectamente	| ubicacion |		ubicacion := UbicacionViP registrar: 'ViP 01' conTarifa: 1500 lugaresDisponibles: 5.		self assert: (ubicacion calcularCosto) equals: (1500 / 5).! !!UbicacionViPTest methodsFor: 'tests' stamp: 'MatiasVallejos 9/28/2023 02:46'!test02NoPuedoRegistrarUnaUbicacionConTarifaNegativa	self should:[ UbicacionViP registrar:  'ViP 01' conTarifa: -1000 lugaresDisponibles: 5] raise: TarifaDebeSerMayorACeroError.	! !